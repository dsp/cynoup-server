<?php
namespace cynoup\routing;
/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface NewEdenRoutingIf {
  /**
   * @param int $fromSolarSystemId
   * @param int $toSolarSystemId
   * @param \cynoup\neweden\Connection[] $connections
   * @param int $opts
   * @return int[]
   * @throws \cynoup\neweden\LogicalError
   */
  public function route($fromSolarSystemId, $toSolarSystemId, array $connections, $opts);
  /**
   * @param int $fromSolarSystemId
   * @param int $toSolarSystemId
   * @param \cynoup\neweden\SolarSystem[] $systems
   * @param double $reachInLightyears
   * @param int $opts
   * @param int $limit
   * @return int[]
   * @throws \cynoup\neweden\LogicalError
   */
  public function jumps($fromSolarSystemId, $toSolarSystemId, array $systems, $reachInLightyears, $opts, $limit);
}

class NewEdenRoutingClient implements \cynoup\routing\NewEdenRoutingIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function route($fromSolarSystemId, $toSolarSystemId, array $connections, $opts)
  {
    $this->send_route($fromSolarSystemId, $toSolarSystemId, $connections, $opts);
    return $this->recv_route();
  }

  public function send_route($fromSolarSystemId, $toSolarSystemId, array $connections, $opts)
  {
    $args = new \cynoup\routing\NewEdenRouting_route_args();
    $args->fromSolarSystemId = $fromSolarSystemId;
    $args->toSolarSystemId = $toSolarSystemId;
    $args->connections = $connections;
    $args->opts = $opts;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'route', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('route', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_route()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cynoup\routing\NewEdenRouting_route_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cynoup\routing\NewEdenRouting_route_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->le !== null) {
      throw $result->le;
    }
    throw new \Exception("route failed: unknown result");
  }

  public function jumps($fromSolarSystemId, $toSolarSystemId, array $systems, $reachInLightyears, $opts, $limit)
  {
    $this->send_jumps($fromSolarSystemId, $toSolarSystemId, $systems, $reachInLightyears, $opts, $limit);
    return $this->recv_jumps();
  }

  public function send_jumps($fromSolarSystemId, $toSolarSystemId, array $systems, $reachInLightyears, $opts, $limit)
  {
    $args = new \cynoup\routing\NewEdenRouting_jumps_args();
    $args->fromSolarSystemId = $fromSolarSystemId;
    $args->toSolarSystemId = $toSolarSystemId;
    $args->systems = $systems;
    $args->reachInLightyears = $reachInLightyears;
    $args->opts = $opts;
    $args->limit = $limit;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'jumps', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('jumps', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_jumps()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cynoup\routing\NewEdenRouting_jumps_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cynoup\routing\NewEdenRouting_jumps_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->le !== null) {
      throw $result->le;
    }
    throw new \Exception("jumps failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class NewEdenRouting_route_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $fromSolarSystemId = null;
  /**
   * @var int
   */
  public $toSolarSystemId = null;
  /**
   * @var \cynoup\neweden\Connection[]
   */
  public $connections = null;
  /**
   * @var int
   */
  public $opts = 1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fromSolarSystemId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'toSolarSystemId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'connections',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cynoup\neweden\Connection',
            ),
          ),
        4 => array(
          'var' => 'opts',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fromSolarSystemId'])) {
        $this->fromSolarSystemId = $vals['fromSolarSystemId'];
      }
      if (isset($vals['toSolarSystemId'])) {
        $this->toSolarSystemId = $vals['toSolarSystemId'];
      }
      if (isset($vals['connections'])) {
        $this->connections = $vals['connections'];
      }
      if (isset($vals['opts'])) {
        $this->opts = $vals['opts'];
      }
    }
  }

  public function getName() {
    return 'NewEdenRouting_route_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fromSolarSystemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->toSolarSystemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->connections = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \cynoup\neweden\Connection();
              $xfer += $elem5->read($input);
              $this->connections []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->opts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewEdenRouting_route_args');
    if ($this->fromSolarSystemId !== null) {
      $xfer += $output->writeFieldBegin('fromSolarSystemId', TType::I32, 1);
      $xfer += $output->writeI32($this->fromSolarSystemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toSolarSystemId !== null) {
      $xfer += $output->writeFieldBegin('toSolarSystemId', TType::I32, 2);
      $xfer += $output->writeI32($this->toSolarSystemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->connections !== null) {
      if (!is_array($this->connections)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('connections', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->connections));
        {
          foreach ($this->connections as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opts !== null) {
      $xfer += $output->writeFieldBegin('opts', TType::BYTE, 4);
      $xfer += $output->writeByte($this->opts);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewEdenRouting_route_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \cynoup\neweden\LogicalError
   */
  public $le = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'le',
          'type' => TType::STRUCT,
          'class' => '\cynoup\neweden\LogicalError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['le'])) {
        $this->le = $vals['le'];
      }
    }
  }

  public function getName() {
    return 'NewEdenRouting_route_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI32($elem12);
              $this->success []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->le = new \cynoup\neweden\LogicalError();
            $xfer += $this->le->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewEdenRouting_route_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::I32, count($this->success));
        {
          foreach ($this->success as $iter13)
          {
            $xfer += $output->writeI32($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->le !== null) {
      $xfer += $output->writeFieldBegin('le', TType::STRUCT, 1);
      $xfer += $this->le->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewEdenRouting_jumps_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $fromSolarSystemId = null;
  /**
   * @var int
   */
  public $toSolarSystemId = null;
  /**
   * @var \cynoup\neweden\SolarSystem[]
   */
  public $systems = null;
  /**
   * @var double
   */
  public $reachInLightyears = null;
  /**
   * @var int
   */
  public $opts = 1;
  /**
   * @var int
   */
  public $limit = -1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fromSolarSystemId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'toSolarSystemId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'systems',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\cynoup\neweden\SolarSystem',
            ),
          ),
        4 => array(
          'var' => 'reachInLightyears',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'opts',
          'type' => TType::BYTE,
          ),
        6 => array(
          'var' => 'limit',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fromSolarSystemId'])) {
        $this->fromSolarSystemId = $vals['fromSolarSystemId'];
      }
      if (isset($vals['toSolarSystemId'])) {
        $this->toSolarSystemId = $vals['toSolarSystemId'];
      }
      if (isset($vals['systems'])) {
        $this->systems = $vals['systems'];
      }
      if (isset($vals['reachInLightyears'])) {
        $this->reachInLightyears = $vals['reachInLightyears'];
      }
      if (isset($vals['opts'])) {
        $this->opts = $vals['opts'];
      }
      if (isset($vals['limit'])) {
        $this->limit = $vals['limit'];
      }
    }
  }

  public function getName() {
    return 'NewEdenRouting_jumps_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fromSolarSystemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->toSolarSystemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->systems = array();
            $_size14 = 0;
            $_etype17 = 0;
            $xfer += $input->readListBegin($_etype17, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $elem19 = null;
              $elem19 = new \cynoup\neweden\SolarSystem();
              $xfer += $elem19->read($input);
              $this->systems []= $elem19;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->reachInLightyears);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->opts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->limit);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewEdenRouting_jumps_args');
    if ($this->fromSolarSystemId !== null) {
      $xfer += $output->writeFieldBegin('fromSolarSystemId', TType::I32, 1);
      $xfer += $output->writeI32($this->fromSolarSystemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toSolarSystemId !== null) {
      $xfer += $output->writeFieldBegin('toSolarSystemId', TType::I32, 2);
      $xfer += $output->writeI32($this->toSolarSystemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->systems !== null) {
      if (!is_array($this->systems)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('systems', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->systems));
        {
          foreach ($this->systems as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reachInLightyears !== null) {
      $xfer += $output->writeFieldBegin('reachInLightyears', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->reachInLightyears);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opts !== null) {
      $xfer += $output->writeFieldBegin('opts', TType::BYTE, 5);
      $xfer += $output->writeByte($this->opts);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->limit !== null) {
      $xfer += $output->writeFieldBegin('limit', TType::BYTE, 6);
      $xfer += $output->writeByte($this->limit);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewEdenRouting_jumps_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \cynoup\neweden\LogicalError
   */
  public $le = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'le',
          'type' => TType::STRUCT,
          'class' => '\cynoup\neweden\LogicalError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['le'])) {
        $this->le = $vals['le'];
      }
    }
  }

  public function getName() {
    return 'NewEdenRouting_jumps_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $xfer += $input->readI32($elem26);
              $this->success []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->le = new \cynoup\neweden\LogicalError();
            $xfer += $this->le->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewEdenRouting_jumps_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::I32, count($this->success));
        {
          foreach ($this->success as $iter27)
          {
            $xfer += $output->writeI32($iter27);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->le !== null) {
      $xfer += $output->writeFieldBegin('le', TType::STRUCT, 1);
      $xfer += $this->le->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


