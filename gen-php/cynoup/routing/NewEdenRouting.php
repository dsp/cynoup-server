<?php
namespace cynoup\routing;
/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface NewEdenRoutingIf {
  /**
   * Find the shortest route between two solar systems
   * 
   * Find the shortest routes between two solar system. Additional
   * connections between solar systems can be placed. Available
   * options are OPTION_PREFER_SHORTEST, OPTION_PREFER_SAFER or
   * OPTION_PREFER_HIGHSEC.
   * 
   * Additional connections can contain a 'weight'. Every connection has a weight
   * of 1 by default. Lower values will result in the connection being preferred.
   * Higher numbers will make it less preferred. E.g. weight 2 means if your shortet
   * standard route is 3 jumps we are picking the additional provided connection,
   * if it's 2 we pick the original connection.
   * 
   * @param int $fromSolarSystemId The system id to start from
   * 
   * @param int $toSolarSystemId The system id to go to
   * 
   * @param int $opts A list of additional connections, not found in the static dump (e.g. wormholes).
   * 3: list<NewEden.Connection> connections,
   * 
   * /** Options on how to choose routes
   * 
   * @return int[]
   * @throws \cynoup\neweden\LogicalError
   */
  public function route($fromSolarSystemId, $toSolarSystemId, $opts);
  /**
   * Find the shorteest jump routes.
   * 
   * @param int $fromSolarSystemId The system id to start from
   * 
   * @param int $toSolarSystemId The system id to go to
   * 
   * @param double $rangeInLightyears Jump range in lightyears (e.g. 5.0 for a Nyx)
   * 
   * @param int $opts Options on how to choose routes
   * 
   * @return int[]
   * @throws \cynoup\neweden\LogicalError
   */
  public function jumps($fromSolarSystemId, $toSolarSystemId, $rangeInLightyears, $opts);
}

class NewEdenRoutingClient implements \cynoup\routing\NewEdenRoutingIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function route($fromSolarSystemId, $toSolarSystemId, $opts)
  {
    $this->send_route($fromSolarSystemId, $toSolarSystemId, $opts);
    return $this->recv_route();
  }

  public function send_route($fromSolarSystemId, $toSolarSystemId, $opts)
  {
    $args = new \cynoup\routing\NewEdenRouting_route_args();
    $args->fromSolarSystemId = $fromSolarSystemId;
    $args->toSolarSystemId = $toSolarSystemId;
    $args->opts = $opts;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'route', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('route', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_route()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cynoup\routing\NewEdenRouting_route_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cynoup\routing\NewEdenRouting_route_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->le !== null) {
      throw $result->le;
    }
    throw new \Exception("route failed: unknown result");
  }

  public function jumps($fromSolarSystemId, $toSolarSystemId, $rangeInLightyears, $opts)
  {
    $this->send_jumps($fromSolarSystemId, $toSolarSystemId, $rangeInLightyears, $opts);
    return $this->recv_jumps();
  }

  public function send_jumps($fromSolarSystemId, $toSolarSystemId, $rangeInLightyears, $opts)
  {
    $args = new \cynoup\routing\NewEdenRouting_jumps_args();
    $args->fromSolarSystemId = $fromSolarSystemId;
    $args->toSolarSystemId = $toSolarSystemId;
    $args->rangeInLightyears = $rangeInLightyears;
    $args->opts = $opts;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'jumps', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('jumps', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_jumps()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\cynoup\routing\NewEdenRouting_jumps_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \cynoup\routing\NewEdenRouting_jumps_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->le !== null) {
      throw $result->le;
    }
    throw new \Exception("jumps failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class NewEdenRouting_route_args {
  static $_TSPEC;

  /**
   * The system id to start from
   * 
   * @var int
   */
  public $fromSolarSystemId = null;
  /**
   * The system id to go to
   * 
   * @var int
   */
  public $toSolarSystemId = null;
  /**
   * A list of additional connections, not found in the static dump (e.g. wormholes).
   * 3: list<NewEden.Connection> connections,
   * 
   * /** Options on how to choose routes
   * 
   * @var int
   */
  public $opts = 1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fromSolarSystemId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'toSolarSystemId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'opts',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fromSolarSystemId'])) {
        $this->fromSolarSystemId = $vals['fromSolarSystemId'];
      }
      if (isset($vals['toSolarSystemId'])) {
        $this->toSolarSystemId = $vals['toSolarSystemId'];
      }
      if (isset($vals['opts'])) {
        $this->opts = $vals['opts'];
      }
    }
  }

  public function getName() {
    return 'NewEdenRouting_route_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fromSolarSystemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->toSolarSystemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->opts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewEdenRouting_route_args');
    if ($this->fromSolarSystemId !== null) {
      $xfer += $output->writeFieldBegin('fromSolarSystemId', TType::I32, 1);
      $xfer += $output->writeI32($this->fromSolarSystemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toSolarSystemId !== null) {
      $xfer += $output->writeFieldBegin('toSolarSystemId', TType::I32, 2);
      $xfer += $output->writeI32($this->toSolarSystemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opts !== null) {
      $xfer += $output->writeFieldBegin('opts', TType::BYTE, 4);
      $xfer += $output->writeByte($this->opts);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewEdenRouting_route_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \cynoup\neweden\LogicalError
   */
  public $le = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'le',
          'type' => TType::STRUCT,
          'class' => '\cynoup\neweden\LogicalError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['le'])) {
        $this->le = $vals['le'];
      }
    }
  }

  public function getName() {
    return 'NewEdenRouting_route_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readI32($elem5);
              $this->success []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->le = new \cynoup\neweden\LogicalError();
            $xfer += $this->le->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewEdenRouting_route_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::I32, count($this->success));
        {
          foreach ($this->success as $iter6)
          {
            $xfer += $output->writeI32($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->le !== null) {
      $xfer += $output->writeFieldBegin('le', TType::STRUCT, 1);
      $xfer += $this->le->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewEdenRouting_jumps_args {
  static $_TSPEC;

  /**
   * The system id to start from
   * 
   * @var int
   */
  public $fromSolarSystemId = null;
  /**
   * The system id to go to
   * 
   * @var int
   */
  public $toSolarSystemId = null;
  /**
   * Jump range in lightyears (e.g. 5.0 for a Nyx)
   * 
   * @var double
   */
  public $rangeInLightyears = null;
  /**
   * Options on how to choose routes
   * 
   * @var int
   */
  public $opts = 1;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'fromSolarSystemId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'toSolarSystemId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'rangeInLightyears',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'opts',
          'type' => TType::BYTE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['fromSolarSystemId'])) {
        $this->fromSolarSystemId = $vals['fromSolarSystemId'];
      }
      if (isset($vals['toSolarSystemId'])) {
        $this->toSolarSystemId = $vals['toSolarSystemId'];
      }
      if (isset($vals['rangeInLightyears'])) {
        $this->rangeInLightyears = $vals['rangeInLightyears'];
      }
      if (isset($vals['opts'])) {
        $this->opts = $vals['opts'];
      }
    }
  }

  public function getName() {
    return 'NewEdenRouting_jumps_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->fromSolarSystemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->toSolarSystemId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->rangeInLightyears);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->opts);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewEdenRouting_jumps_args');
    if ($this->fromSolarSystemId !== null) {
      $xfer += $output->writeFieldBegin('fromSolarSystemId', TType::I32, 1);
      $xfer += $output->writeI32($this->fromSolarSystemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toSolarSystemId !== null) {
      $xfer += $output->writeFieldBegin('toSolarSystemId', TType::I32, 2);
      $xfer += $output->writeI32($this->toSolarSystemId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rangeInLightyears !== null) {
      $xfer += $output->writeFieldBegin('rangeInLightyears', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->rangeInLightyears);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opts !== null) {
      $xfer += $output->writeFieldBegin('opts', TType::BYTE, 5);
      $xfer += $output->writeByte($this->opts);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NewEdenRouting_jumps_result {
  static $_TSPEC;

  /**
   * @var int[]
   */
  public $success = null;
  /**
   * @var \cynoup\neweden\LogicalError
   */
  public $le = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::I32,
          'elem' => array(
            'type' => TType::I32,
            ),
          ),
        1 => array(
          'var' => 'le',
          'type' => TType::STRUCT,
          'class' => '\cynoup\neweden\LogicalError',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['le'])) {
        $this->le = $vals['le'];
      }
    }
  }

  public function getName() {
    return 'NewEdenRouting_jumps_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readI32($elem12);
              $this->success []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->le = new \cynoup\neweden\LogicalError();
            $xfer += $this->le->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NewEdenRouting_jumps_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::I32, count($this->success));
        {
          foreach ($this->success as $iter13)
          {
            $xfer += $output->writeI32($iter13);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->le !== null) {
      $xfer += $output->writeFieldBegin('le', TType::STRUCT, 1);
      $xfer += $this->le->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


