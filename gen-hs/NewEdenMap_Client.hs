{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (1.0.0-dev)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module NewEdenMap_Client(systems,connection,closest,closestCelestial,distance) where
import qualified Data.IORef as R
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T

import qualified NewEden_Types


import NewEdenMapService_Types
import NewEdenMap
seqid = R.newIORef 0
systems (ip,op) = do
  send_systems op
  recv_systems ip
send_systems op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("systems", T.M_CALL, seqn)
  write_Systems_args op (Systems_args{})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_systems ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_Systems_result ip
  T.readMessageEnd ip
  P.return $ systems_result_success res
connection (ip,op) = do
  send_connection op
  recv_connection ip
send_connection op = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("connection", T.M_CALL, seqn)
  write_Connection_args op (Connection_args{})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_connection ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_Connection_result ip
  T.readMessageEnd ip
  P.return $ connection_result_success res
closest (ip,op) arg_solarSystemId arg_coord = do
  send_closest op arg_solarSystemId arg_coord
  recv_closest ip
send_closest op arg_solarSystemId arg_coord = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("closest", T.M_CALL, seqn)
  write_Closest_args op (Closest_args{closest_args_solarSystemId=arg_solarSystemId,closest_args_coord=arg_coord})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_closest ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_Closest_result ip
  T.readMessageEnd ip
  P.return $ closest_result_success res
closestCelestial (ip,op) arg_coord = do
  send_closestCelestial op arg_coord
  recv_closestCelestial ip
send_closestCelestial op arg_coord = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("closestCelestial", T.M_CALL, seqn)
  write_ClosestCelestial_args op (ClosestCelestial_args{closestCelestial_args_coord=arg_coord})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_closestCelestial ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_ClosestCelestial_result ip
  T.readMessageEnd ip
  P.return $ closestCelestial_result_success res
distance (ip,op) arg_celestial arg_coord = do
  send_distance op arg_celestial arg_coord
  recv_distance ip
send_distance op arg_celestial arg_coord = do
  seq <- seqid
  seqn <- R.readIORef seq
  T.writeMessageBegin op ("distance", T.M_CALL, seqn)
  write_Distance_args op (Distance_args{distance_args_celestial=arg_celestial,distance_args_coord=arg_coord})
  T.writeMessageEnd op
  T.tFlush (T.getTransport op)
recv_distance ip = do
  (fname, mtype, rseqid) <- T.readMessageBegin ip
  M.when (mtype == T.M_EXCEPTION) $ do { exn <- T.readAppExn ip ; T.readMessageEnd ip ; X.throw exn }
  res <- read_Distance_result ip
  T.readMessageEnd ip
  P.return $ distance_result_success res
