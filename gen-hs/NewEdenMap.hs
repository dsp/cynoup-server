{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (1.0.0-dev)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module NewEdenMap where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T

import qualified NewEden_Types


import NewEdenMapService_Types
import qualified NewEdenMap_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data Systems_args = Systems_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Systems_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Systems_args where 
  arbitrary = QC.elements [Systems_args]
from_Systems_args :: Systems_args -> T.ThriftVal
from_Systems_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Systems_args :: (T.Protocol p, T.Transport t) => p t -> Systems_args -> P.IO ()
write_Systems_args oprot record = T.writeVal oprot $ from_Systems_args record
encode_Systems_args :: (T.Protocol p, T.Transport t) => p t -> Systems_args -> LBS.ByteString
encode_Systems_args oprot record = T.serializeVal oprot $ from_Systems_args record
to_Systems_args :: T.ThriftVal -> Systems_args
to_Systems_args (T.TStruct fields) = Systems_args{

  }
to_Systems_args _ = P.error "not a struct"
read_Systems_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Systems_args
read_Systems_args iprot = to_Systems_args <$> T.readVal iprot (T.T_STRUCT typemap_Systems_args)
decode_Systems_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Systems_args
decode_Systems_args iprot bs = to_Systems_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Systems_args) bs
typemap_Systems_args :: T.TypeMap
typemap_Systems_args = Map.fromList []
default_Systems_args :: Systems_args
default_Systems_args = Systems_args{
}
data Systems_result = Systems_result  { systems_result_success :: (Map.HashMap I.Int32 NewEden_Types.SolarSystem)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Systems_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` systems_result_success record  
instance QC.Arbitrary Systems_result where 
  arbitrary = M.liftM Systems_result (QC.arbitrary)
  shrink obj | obj == default_Systems_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Systems_result{systems_result_success = systems_result_success obj} then P.Nothing else P.Just $ default_Systems_result{systems_result_success = systems_result_success obj}
    ]
from_Systems_result :: Systems_result -> T.ThriftVal
from_Systems_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v7 -> P.Just (0, ("success",T.TMap T.T_I32 (T.T_STRUCT NewEden_Types.typemap_SolarSystem) $ P.map (\(_k8,_v9) -> (T.TI32 _k8, NewEden_Types.from_SolarSystem _v9)) $ Map.toList _v7))) $ systems_result_success record
  ]
write_Systems_result :: (T.Protocol p, T.Transport t) => p t -> Systems_result -> P.IO ()
write_Systems_result oprot record = T.writeVal oprot $ from_Systems_result record
encode_Systems_result :: (T.Protocol p, T.Transport t) => p t -> Systems_result -> LBS.ByteString
encode_Systems_result oprot record = T.serializeVal oprot $ from_Systems_result record
to_Systems_result :: T.ThriftVal -> Systems_result
to_Systems_result (T.TStruct fields) = Systems_result{
  systems_result_success = P.maybe (systems_result_success default_Systems_result) (\(_,_val11) -> (case _val11 of {T.TMap _ _ _val12 -> (Map.fromList $ P.map (\(_k14,_v13) -> ((case _k14 of {T.TI32 _val15 -> _val15; _ -> P.error "wrong type"}),(case _v13 of {T.TStruct _val16 -> (NewEden_Types.to_SolarSystem (T.TStruct _val16)); _ -> P.error "wrong type"}))) _val12); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_Systems_result _ = P.error "not a struct"
read_Systems_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Systems_result
read_Systems_result iprot = to_Systems_result <$> T.readVal iprot (T.T_STRUCT typemap_Systems_result)
decode_Systems_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Systems_result
decode_Systems_result iprot bs = to_Systems_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Systems_result) bs
typemap_Systems_result :: T.TypeMap
typemap_Systems_result = Map.fromList [(0,("success",(T.T_MAP T.T_I32 (T.T_STRUCT NewEden_Types.typemap_SolarSystem))))]
default_Systems_result :: Systems_result
default_Systems_result = Systems_result{
  systems_result_success = Map.empty}
data Connection_args = Connection_args deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Connection_args where
  hashWithSalt salt record = salt  
instance QC.Arbitrary Connection_args where 
  arbitrary = QC.elements [Connection_args]
from_Connection_args :: Connection_args -> T.ThriftVal
from_Connection_args record = T.TStruct $ Map.fromList $ M.catMaybes
  []
write_Connection_args :: (T.Protocol p, T.Transport t) => p t -> Connection_args -> P.IO ()
write_Connection_args oprot record = T.writeVal oprot $ from_Connection_args record
encode_Connection_args :: (T.Protocol p, T.Transport t) => p t -> Connection_args -> LBS.ByteString
encode_Connection_args oprot record = T.serializeVal oprot $ from_Connection_args record
to_Connection_args :: T.ThriftVal -> Connection_args
to_Connection_args (T.TStruct fields) = Connection_args{

  }
to_Connection_args _ = P.error "not a struct"
read_Connection_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Connection_args
read_Connection_args iprot = to_Connection_args <$> T.readVal iprot (T.T_STRUCT typemap_Connection_args)
decode_Connection_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Connection_args
decode_Connection_args iprot bs = to_Connection_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Connection_args) bs
typemap_Connection_args :: T.TypeMap
typemap_Connection_args = Map.fromList []
default_Connection_args :: Connection_args
default_Connection_args = Connection_args{
}
data Connection_result = Connection_result  { connection_result_success :: (Map.HashMap I.Int32 NewEden_Types.Connection)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Connection_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` connection_result_success record  
instance QC.Arbitrary Connection_result where 
  arbitrary = M.liftM Connection_result (QC.arbitrary)
  shrink obj | obj == default_Connection_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Connection_result{connection_result_success = connection_result_success obj} then P.Nothing else P.Just $ default_Connection_result{connection_result_success = connection_result_success obj}
    ]
from_Connection_result :: Connection_result -> T.ThriftVal
from_Connection_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v24 -> P.Just (0, ("success",T.TMap T.T_I32 (T.T_STRUCT NewEden_Types.typemap_Connection) $ P.map (\(_k25,_v26) -> (T.TI32 _k25, NewEden_Types.from_Connection _v26)) $ Map.toList _v24))) $ connection_result_success record
  ]
write_Connection_result :: (T.Protocol p, T.Transport t) => p t -> Connection_result -> P.IO ()
write_Connection_result oprot record = T.writeVal oprot $ from_Connection_result record
encode_Connection_result :: (T.Protocol p, T.Transport t) => p t -> Connection_result -> LBS.ByteString
encode_Connection_result oprot record = T.serializeVal oprot $ from_Connection_result record
to_Connection_result :: T.ThriftVal -> Connection_result
to_Connection_result (T.TStruct fields) = Connection_result{
  connection_result_success = P.maybe (connection_result_success default_Connection_result) (\(_,_val28) -> (case _val28 of {T.TMap _ _ _val29 -> (Map.fromList $ P.map (\(_k31,_v30) -> ((case _k31 of {T.TI32 _val32 -> _val32; _ -> P.error "wrong type"}),(case _v30 of {T.TStruct _val33 -> (NewEden_Types.to_Connection (T.TStruct _val33)); _ -> P.error "wrong type"}))) _val29); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_Connection_result _ = P.error "not a struct"
read_Connection_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Connection_result
read_Connection_result iprot = to_Connection_result <$> T.readVal iprot (T.T_STRUCT typemap_Connection_result)
decode_Connection_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Connection_result
decode_Connection_result iprot bs = to_Connection_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Connection_result) bs
typemap_Connection_result :: T.TypeMap
typemap_Connection_result = Map.fromList [(0,("success",(T.T_MAP T.T_I32 (T.T_STRUCT NewEden_Types.typemap_Connection))))]
default_Connection_result :: Connection_result
default_Connection_result = Connection_result{
  connection_result_success = Map.empty}
data Closest_args = Closest_args  { closest_args_solarSystemId :: I.Int32
  , closest_args_coord :: NewEden_Types.Coordinate
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Closest_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` closest_args_solarSystemId record   `H.hashWithSalt` closest_args_coord record  
instance QC.Arbitrary Closest_args where 
  arbitrary = M.liftM Closest_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_Closest_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Closest_args{closest_args_solarSystemId = closest_args_solarSystemId obj} then P.Nothing else P.Just $ default_Closest_args{closest_args_solarSystemId = closest_args_solarSystemId obj}
    , if obj == default_Closest_args{closest_args_coord = closest_args_coord obj} then P.Nothing else P.Just $ default_Closest_args{closest_args_coord = closest_args_coord obj}
    ]
from_Closest_args :: Closest_args -> T.ThriftVal
from_Closest_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v36 -> P.Just (1, ("solarSystemId",T.TI32 _v36))) $ closest_args_solarSystemId record
  , (\_v36 -> P.Just (2, ("coord",NewEden_Types.from_Coordinate _v36))) $ closest_args_coord record
  ]
write_Closest_args :: (T.Protocol p, T.Transport t) => p t -> Closest_args -> P.IO ()
write_Closest_args oprot record = T.writeVal oprot $ from_Closest_args record
encode_Closest_args :: (T.Protocol p, T.Transport t) => p t -> Closest_args -> LBS.ByteString
encode_Closest_args oprot record = T.serializeVal oprot $ from_Closest_args record
to_Closest_args :: T.ThriftVal -> Closest_args
to_Closest_args (T.TStruct fields) = Closest_args{
  closest_args_solarSystemId = P.maybe (closest_args_solarSystemId default_Closest_args) (\(_,_val38) -> (case _val38 of {T.TI32 _val39 -> _val39; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  closest_args_coord = P.maybe (closest_args_coord default_Closest_args) (\(_,_val38) -> (case _val38 of {T.TStruct _val40 -> (NewEden_Types.to_Coordinate (T.TStruct _val40)); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_Closest_args _ = P.error "not a struct"
read_Closest_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Closest_args
read_Closest_args iprot = to_Closest_args <$> T.readVal iprot (T.T_STRUCT typemap_Closest_args)
decode_Closest_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Closest_args
decode_Closest_args iprot bs = to_Closest_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Closest_args) bs
typemap_Closest_args :: T.TypeMap
typemap_Closest_args = Map.fromList [(1,("solarSystemId",T.T_I32)),(2,("coord",(T.T_STRUCT NewEden_Types.typemap_Coordinate)))]
default_Closest_args :: Closest_args
default_Closest_args = Closest_args{
  closest_args_solarSystemId = 0,
  closest_args_coord = NewEden_Types.default_Coordinate}
data Closest_result = Closest_result  { closest_result_success :: (Vector.Vector NewEden_Types.Celestial)
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Closest_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` closest_result_success record  
instance QC.Arbitrary Closest_result where 
  arbitrary = M.liftM Closest_result (QC.arbitrary)
  shrink obj | obj == default_Closest_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Closest_result{closest_result_success = closest_result_success obj} then P.Nothing else P.Just $ default_Closest_result{closest_result_success = closest_result_success obj}
    ]
from_Closest_result :: Closest_result -> T.ThriftVal
from_Closest_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v43 -> P.Just (0, ("success",T.TList (T.T_STRUCT NewEden_Types.typemap_Celestial) $ P.map (\_v45 -> NewEden_Types.from_Celestial _v45) $ Vector.toList _v43))) $ closest_result_success record
  ]
write_Closest_result :: (T.Protocol p, T.Transport t) => p t -> Closest_result -> P.IO ()
write_Closest_result oprot record = T.writeVal oprot $ from_Closest_result record
encode_Closest_result :: (T.Protocol p, T.Transport t) => p t -> Closest_result -> LBS.ByteString
encode_Closest_result oprot record = T.serializeVal oprot $ from_Closest_result record
to_Closest_result :: T.ThriftVal -> Closest_result
to_Closest_result (T.TStruct fields) = Closest_result{
  closest_result_success = P.maybe (closest_result_success default_Closest_result) (\(_,_val47) -> (case _val47 of {T.TList _ _val48 -> (Vector.fromList $ P.map (\_v49 -> (case _v49 of {T.TStruct _val50 -> (NewEden_Types.to_Celestial (T.TStruct _val50)); _ -> P.error "wrong type"})) _val48); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_Closest_result _ = P.error "not a struct"
read_Closest_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Closest_result
read_Closest_result iprot = to_Closest_result <$> T.readVal iprot (T.T_STRUCT typemap_Closest_result)
decode_Closest_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Closest_result
decode_Closest_result iprot bs = to_Closest_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Closest_result) bs
typemap_Closest_result :: T.TypeMap
typemap_Closest_result = Map.fromList [(0,("success",(T.T_LIST (T.T_STRUCT NewEden_Types.typemap_Celestial))))]
default_Closest_result :: Closest_result
default_Closest_result = Closest_result{
  closest_result_success = Vector.empty}
data ClosestCelestial_args = ClosestCelestial_args  { closestCelestial_args_coord :: NewEden_Types.Coordinate
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable ClosestCelestial_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` closestCelestial_args_coord record  
instance QC.Arbitrary ClosestCelestial_args where 
  arbitrary = M.liftM ClosestCelestial_args (QC.arbitrary)
  shrink obj | obj == default_ClosestCelestial_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_ClosestCelestial_args{closestCelestial_args_coord = closestCelestial_args_coord obj} then P.Nothing else P.Just $ default_ClosestCelestial_args{closestCelestial_args_coord = closestCelestial_args_coord obj}
    ]
from_ClosestCelestial_args :: ClosestCelestial_args -> T.ThriftVal
from_ClosestCelestial_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v53 -> P.Just (1, ("coord",NewEden_Types.from_Coordinate _v53))) $ closestCelestial_args_coord record
  ]
write_ClosestCelestial_args :: (T.Protocol p, T.Transport t) => p t -> ClosestCelestial_args -> P.IO ()
write_ClosestCelestial_args oprot record = T.writeVal oprot $ from_ClosestCelestial_args record
encode_ClosestCelestial_args :: (T.Protocol p, T.Transport t) => p t -> ClosestCelestial_args -> LBS.ByteString
encode_ClosestCelestial_args oprot record = T.serializeVal oprot $ from_ClosestCelestial_args record
to_ClosestCelestial_args :: T.ThriftVal -> ClosestCelestial_args
to_ClosestCelestial_args (T.TStruct fields) = ClosestCelestial_args{
  closestCelestial_args_coord = P.maybe (closestCelestial_args_coord default_ClosestCelestial_args) (\(_,_val55) -> (case _val55 of {T.TStruct _val56 -> (NewEden_Types.to_Coordinate (T.TStruct _val56)); _ -> P.error "wrong type"})) (Map.lookup (1) fields)
  }
to_ClosestCelestial_args _ = P.error "not a struct"
read_ClosestCelestial_args :: (T.Transport t, T.Protocol p) => p t -> P.IO ClosestCelestial_args
read_ClosestCelestial_args iprot = to_ClosestCelestial_args <$> T.readVal iprot (T.T_STRUCT typemap_ClosestCelestial_args)
decode_ClosestCelestial_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> ClosestCelestial_args
decode_ClosestCelestial_args iprot bs = to_ClosestCelestial_args $ T.deserializeVal iprot (T.T_STRUCT typemap_ClosestCelestial_args) bs
typemap_ClosestCelestial_args :: T.TypeMap
typemap_ClosestCelestial_args = Map.fromList [(1,("coord",(T.T_STRUCT NewEden_Types.typemap_Coordinate)))]
default_ClosestCelestial_args :: ClosestCelestial_args
default_ClosestCelestial_args = ClosestCelestial_args{
  closestCelestial_args_coord = NewEden_Types.default_Coordinate}
data ClosestCelestial_result = ClosestCelestial_result  { closestCelestial_result_success :: NewEden_Types.Celestial
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable ClosestCelestial_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` closestCelestial_result_success record  
instance QC.Arbitrary ClosestCelestial_result where 
  arbitrary = M.liftM ClosestCelestial_result (QC.arbitrary)
  shrink obj | obj == default_ClosestCelestial_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_ClosestCelestial_result{closestCelestial_result_success = closestCelestial_result_success obj} then P.Nothing else P.Just $ default_ClosestCelestial_result{closestCelestial_result_success = closestCelestial_result_success obj}
    ]
from_ClosestCelestial_result :: ClosestCelestial_result -> T.ThriftVal
from_ClosestCelestial_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v59 -> P.Just (0, ("success",NewEden_Types.from_Celestial _v59))) $ closestCelestial_result_success record
  ]
write_ClosestCelestial_result :: (T.Protocol p, T.Transport t) => p t -> ClosestCelestial_result -> P.IO ()
write_ClosestCelestial_result oprot record = T.writeVal oprot $ from_ClosestCelestial_result record
encode_ClosestCelestial_result :: (T.Protocol p, T.Transport t) => p t -> ClosestCelestial_result -> LBS.ByteString
encode_ClosestCelestial_result oprot record = T.serializeVal oprot $ from_ClosestCelestial_result record
to_ClosestCelestial_result :: T.ThriftVal -> ClosestCelestial_result
to_ClosestCelestial_result (T.TStruct fields) = ClosestCelestial_result{
  closestCelestial_result_success = P.maybe (closestCelestial_result_success default_ClosestCelestial_result) (\(_,_val61) -> (case _val61 of {T.TStruct _val62 -> (NewEden_Types.to_Celestial (T.TStruct _val62)); _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_ClosestCelestial_result _ = P.error "not a struct"
read_ClosestCelestial_result :: (T.Transport t, T.Protocol p) => p t -> P.IO ClosestCelestial_result
read_ClosestCelestial_result iprot = to_ClosestCelestial_result <$> T.readVal iprot (T.T_STRUCT typemap_ClosestCelestial_result)
decode_ClosestCelestial_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> ClosestCelestial_result
decode_ClosestCelestial_result iprot bs = to_ClosestCelestial_result $ T.deserializeVal iprot (T.T_STRUCT typemap_ClosestCelestial_result) bs
typemap_ClosestCelestial_result :: T.TypeMap
typemap_ClosestCelestial_result = Map.fromList [(0,("success",(T.T_STRUCT NewEden_Types.typemap_Celestial)))]
default_ClosestCelestial_result :: ClosestCelestial_result
default_ClosestCelestial_result = ClosestCelestial_result{
  closestCelestial_result_success = NewEden_Types.default_Celestial}
data Distance_args = Distance_args  { distance_args_celestial :: NewEden_Types.Celestial
  , distance_args_coord :: NewEden_Types.Coordinate
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Distance_args where
  hashWithSalt salt record = salt   `H.hashWithSalt` distance_args_celestial record   `H.hashWithSalt` distance_args_coord record  
instance QC.Arbitrary Distance_args where 
  arbitrary = M.liftM Distance_args (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_Distance_args = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Distance_args{distance_args_celestial = distance_args_celestial obj} then P.Nothing else P.Just $ default_Distance_args{distance_args_celestial = distance_args_celestial obj}
    , if obj == default_Distance_args{distance_args_coord = distance_args_coord obj} then P.Nothing else P.Just $ default_Distance_args{distance_args_coord = distance_args_coord obj}
    ]
from_Distance_args :: Distance_args -> T.ThriftVal
from_Distance_args record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v65 -> P.Just (1, ("celestial",NewEden_Types.from_Celestial _v65))) $ distance_args_celestial record
  , (\_v65 -> P.Just (2, ("coord",NewEden_Types.from_Coordinate _v65))) $ distance_args_coord record
  ]
write_Distance_args :: (T.Protocol p, T.Transport t) => p t -> Distance_args -> P.IO ()
write_Distance_args oprot record = T.writeVal oprot $ from_Distance_args record
encode_Distance_args :: (T.Protocol p, T.Transport t) => p t -> Distance_args -> LBS.ByteString
encode_Distance_args oprot record = T.serializeVal oprot $ from_Distance_args record
to_Distance_args :: T.ThriftVal -> Distance_args
to_Distance_args (T.TStruct fields) = Distance_args{
  distance_args_celestial = P.maybe (distance_args_celestial default_Distance_args) (\(_,_val67) -> (case _val67 of {T.TStruct _val68 -> (NewEden_Types.to_Celestial (T.TStruct _val68)); _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  distance_args_coord = P.maybe (distance_args_coord default_Distance_args) (\(_,_val67) -> (case _val67 of {T.TStruct _val69 -> (NewEden_Types.to_Coordinate (T.TStruct _val69)); _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_Distance_args _ = P.error "not a struct"
read_Distance_args :: (T.Transport t, T.Protocol p) => p t -> P.IO Distance_args
read_Distance_args iprot = to_Distance_args <$> T.readVal iprot (T.T_STRUCT typemap_Distance_args)
decode_Distance_args :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Distance_args
decode_Distance_args iprot bs = to_Distance_args $ T.deserializeVal iprot (T.T_STRUCT typemap_Distance_args) bs
typemap_Distance_args :: T.TypeMap
typemap_Distance_args = Map.fromList [(1,("celestial",(T.T_STRUCT NewEden_Types.typemap_Celestial))),(2,("coord",(T.T_STRUCT NewEden_Types.typemap_Coordinate)))]
default_Distance_args :: Distance_args
default_Distance_args = Distance_args{
  distance_args_celestial = NewEden_Types.default_Celestial,
  distance_args_coord = NewEden_Types.default_Coordinate}
data Distance_result = Distance_result  { distance_result_success :: P.Double
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Distance_result where
  hashWithSalt salt record = salt   `H.hashWithSalt` distance_result_success record  
instance QC.Arbitrary Distance_result where 
  arbitrary = M.liftM Distance_result (QC.arbitrary)
  shrink obj | obj == default_Distance_result = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Distance_result{distance_result_success = distance_result_success obj} then P.Nothing else P.Just $ default_Distance_result{distance_result_success = distance_result_success obj}
    ]
from_Distance_result :: Distance_result -> T.ThriftVal
from_Distance_result record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v72 -> P.Just (0, ("success",T.TDouble _v72))) $ distance_result_success record
  ]
write_Distance_result :: (T.Protocol p, T.Transport t) => p t -> Distance_result -> P.IO ()
write_Distance_result oprot record = T.writeVal oprot $ from_Distance_result record
encode_Distance_result :: (T.Protocol p, T.Transport t) => p t -> Distance_result -> LBS.ByteString
encode_Distance_result oprot record = T.serializeVal oprot $ from_Distance_result record
to_Distance_result :: T.ThriftVal -> Distance_result
to_Distance_result (T.TStruct fields) = Distance_result{
  distance_result_success = P.maybe (distance_result_success default_Distance_result) (\(_,_val74) -> (case _val74 of {T.TDouble _val75 -> _val75; _ -> P.error "wrong type"})) (Map.lookup (0) fields)
  }
to_Distance_result _ = P.error "not a struct"
read_Distance_result :: (T.Transport t, T.Protocol p) => p t -> P.IO Distance_result
read_Distance_result iprot = to_Distance_result <$> T.readVal iprot (T.T_STRUCT typemap_Distance_result)
decode_Distance_result :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Distance_result
decode_Distance_result iprot bs = to_Distance_result $ T.deserializeVal iprot (T.T_STRUCT typemap_Distance_result) bs
typemap_Distance_result :: T.TypeMap
typemap_Distance_result = Map.fromList [(0,("success",T.T_DOUBLE))]
default_Distance_result :: Distance_result
default_Distance_result = Distance_result{
  distance_result_success = 0}
process_systems (seqid, iprot, oprot, handler) = do
  args <- read_Systems_args iprot
  (X.catch
    (do
      val <- Iface.systems handler
      let res = default_Systems_result{systems_result_success = val}
      T.writeMessageBegin oprot ("systems", T.M_REPLY, seqid)
      write_Systems_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("systems", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_connection (seqid, iprot, oprot, handler) = do
  args <- read_Connection_args iprot
  (X.catch
    (do
      val <- Iface.connection handler
      let res = default_Connection_result{connection_result_success = val}
      T.writeMessageBegin oprot ("connection", T.M_REPLY, seqid)
      write_Connection_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("connection", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_closest (seqid, iprot, oprot, handler) = do
  args <- read_Closest_args iprot
  (X.catch
    (do
      val <- Iface.closest handler (closest_args_solarSystemId args) (closest_args_coord args)
      let res = default_Closest_result{closest_result_success = val}
      T.writeMessageBegin oprot ("closest", T.M_REPLY, seqid)
      write_Closest_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("closest", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_closestCelestial (seqid, iprot, oprot, handler) = do
  args <- read_ClosestCelestial_args iprot
  (X.catch
    (do
      val <- Iface.closestCelestial handler (closestCelestial_args_coord args)
      let res = default_ClosestCelestial_result{closestCelestial_result_success = val}
      T.writeMessageBegin oprot ("closestCelestial", T.M_REPLY, seqid)
      write_ClosestCelestial_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("closestCelestial", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
process_distance (seqid, iprot, oprot, handler) = do
  args <- read_Distance_args iprot
  (X.catch
    (do
      val <- Iface.distance handler (distance_args_celestial args) (distance_args_coord args)
      let res = default_Distance_result{distance_result_success = val}
      T.writeMessageBegin oprot ("distance", T.M_REPLY, seqid)
      write_Distance_result oprot res
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot))
    ((\_ -> do
      T.writeMessageBegin oprot ("distance", T.M_EXCEPTION, seqid)
      T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN "")
      T.writeMessageEnd oprot
      T.tFlush (T.getTransport oprot)) :: X.SomeException -> P.IO ()))
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "systems" -> process_systems (seqid,iprot,oprot,handler)
  "connection" -> process_connection (seqid,iprot,oprot,handler)
  "closest" -> process_closest (seqid,iprot,oprot,handler)
  "closestCelestial" -> process_closestCelestial (seqid,iprot,oprot,handler)
  "distance" -> process_distance (seqid,iprot,oprot,handler)
  _ -> do
    _ <- T.readVal iprot (T.T_STRUCT Map.empty)
    T.writeMessageBegin oprot (name,T.M_EXCEPTION,seqid)
    T.writeAppExn oprot (T.AppExn T.AE_UNKNOWN_METHOD ("Unknown function " ++ LT.unpack name))
    T.writeMessageEnd oprot
    T.tFlush (T.getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- T.readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  T.readMessageEnd iprot
  P.return P.True
