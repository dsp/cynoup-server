{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (1.0.0-dev)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module NewEdenMapService_Types where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T

import qualified NewEden_Types


data LogicalError = LogicalError  { logicalError_errno :: I.Int32
  , logicalError_message :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance X.Exception LogicalError
instance H.Hashable LogicalError where
  hashWithSalt salt record = salt   `H.hashWithSalt` logicalError_errno record   `H.hashWithSalt` logicalError_message record  
instance QC.Arbitrary LogicalError where 
  arbitrary = M.liftM LogicalError (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_LogicalError = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LogicalError{logicalError_errno = logicalError_errno obj} then P.Nothing else P.Just $ default_LogicalError{logicalError_errno = logicalError_errno obj}
    , if obj == default_LogicalError{logicalError_message = logicalError_message obj} then P.Nothing else P.Just $ default_LogicalError{logicalError_message = logicalError_message obj}
    ]
from_LogicalError :: LogicalError -> T.ThriftVal
from_LogicalError record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2 -> P.Just (1, ("errno",T.TI32 _v2))) $ logicalError_errno record
  , (\_v2 -> P.Just (2, ("message",T.TString $ E.encodeUtf8 _v2))) $ logicalError_message record
  ]
write_LogicalError :: (T.Protocol p, T.Transport t) => p t -> LogicalError -> P.IO ()
write_LogicalError oprot record = T.writeVal oprot $ from_LogicalError record
encode_LogicalError :: (T.Protocol p, T.Transport t) => p t -> LogicalError -> LBS.ByteString
encode_LogicalError oprot record = T.serializeVal oprot $ from_LogicalError record
to_LogicalError :: T.ThriftVal -> LogicalError
to_LogicalError (T.TStruct fields) = LogicalError{
  logicalError_errno = P.maybe (logicalError_errno default_LogicalError) (\(_,_val4) -> (case _val4 of {T.TI32 _val5 -> _val5; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  logicalError_message = P.maybe (logicalError_message default_LogicalError) (\(_,_val4) -> (case _val4 of {T.TString _val6 -> E.decodeUtf8 _val6; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_LogicalError _ = P.error "not a struct"
read_LogicalError :: (T.Transport t, T.Protocol p) => p t -> P.IO LogicalError
read_LogicalError iprot = to_LogicalError <$> T.readVal iprot (T.T_STRUCT typemap_LogicalError)
decode_LogicalError :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> LogicalError
decode_LogicalError iprot bs = to_LogicalError $ T.deserializeVal iprot (T.T_STRUCT typemap_LogicalError) bs
typemap_LogicalError :: T.TypeMap
typemap_LogicalError = Map.fromList [(1,("errno",T.T_I32)),(2,("message",T.T_STRING))]
default_LogicalError :: LogicalError
default_LogicalError = LogicalError{
  logicalError_errno = 0,
  logicalError_message = ""}
