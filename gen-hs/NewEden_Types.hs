{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (1.0.0-dev)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module NewEden_Types where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


data Coordinate = Coordinate  { coordinate_x :: P.Double
  , coordinate_y :: P.Double
  , coordinate_z :: P.Double
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Coordinate where
  hashWithSalt salt record = salt   `H.hashWithSalt` coordinate_x record   `H.hashWithSalt` coordinate_y record   `H.hashWithSalt` coordinate_z record  
instance QC.Arbitrary Coordinate where 
  arbitrary = M.liftM Coordinate (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_Coordinate = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Coordinate{coordinate_x = coordinate_x obj} then P.Nothing else P.Just $ default_Coordinate{coordinate_x = coordinate_x obj}
    , if obj == default_Coordinate{coordinate_y = coordinate_y obj} then P.Nothing else P.Just $ default_Coordinate{coordinate_y = coordinate_y obj}
    , if obj == default_Coordinate{coordinate_z = coordinate_z obj} then P.Nothing else P.Just $ default_Coordinate{coordinate_z = coordinate_z obj}
    ]
from_Coordinate :: Coordinate -> T.ThriftVal
from_Coordinate record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2 -> P.Just (1, ("x",T.TDouble _v2))) $ coordinate_x record
  , (\_v2 -> P.Just (2, ("y",T.TDouble _v2))) $ coordinate_y record
  , (\_v2 -> P.Just (3, ("z",T.TDouble _v2))) $ coordinate_z record
  ]
write_Coordinate :: (T.Protocol p, T.Transport t) => p t -> Coordinate -> P.IO ()
write_Coordinate oprot record = T.writeVal oprot $ from_Coordinate record
encode_Coordinate :: (T.Protocol p, T.Transport t) => p t -> Coordinate -> LBS.ByteString
encode_Coordinate oprot record = T.serializeVal oprot $ from_Coordinate record
to_Coordinate :: T.ThriftVal -> Coordinate
to_Coordinate (T.TStruct fields) = Coordinate{
  coordinate_x = P.maybe (coordinate_x default_Coordinate) (\(_,_val4) -> (case _val4 of {T.TDouble _val5 -> _val5; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  coordinate_y = P.maybe (coordinate_y default_Coordinate) (\(_,_val4) -> (case _val4 of {T.TDouble _val6 -> _val6; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  coordinate_z = P.maybe (coordinate_z default_Coordinate) (\(_,_val4) -> (case _val4 of {T.TDouble _val7 -> _val7; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_Coordinate _ = P.error "not a struct"
read_Coordinate :: (T.Transport t, T.Protocol p) => p t -> P.IO Coordinate
read_Coordinate iprot = to_Coordinate <$> T.readVal iprot (T.T_STRUCT typemap_Coordinate)
decode_Coordinate :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Coordinate
decode_Coordinate iprot bs = to_Coordinate $ T.deserializeVal iprot (T.T_STRUCT typemap_Coordinate) bs
typemap_Coordinate :: T.TypeMap
typemap_Coordinate = Map.fromList [(1,("x",T.T_DOUBLE)),(2,("y",T.T_DOUBLE)),(3,("z",T.T_DOUBLE))]
default_Coordinate :: Coordinate
default_Coordinate = Coordinate{
  coordinate_x = 0,
  coordinate_y = 0,
  coordinate_z = 0}
data SolarSystem = SolarSystem  { solarSystem_systemId :: I.Int32
  , solarSystem_name :: LT.Text
  , solarSystem_security :: P.Double
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable SolarSystem where
  hashWithSalt salt record = salt   `H.hashWithSalt` solarSystem_systemId record   `H.hashWithSalt` solarSystem_name record   `H.hashWithSalt` solarSystem_security record  
instance QC.Arbitrary SolarSystem where 
  arbitrary = M.liftM SolarSystem (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_SolarSystem = []
             | P.otherwise = M.catMaybes
    [ if obj == default_SolarSystem{solarSystem_systemId = solarSystem_systemId obj} then P.Nothing else P.Just $ default_SolarSystem{solarSystem_systemId = solarSystem_systemId obj}
    , if obj == default_SolarSystem{solarSystem_name = solarSystem_name obj} then P.Nothing else P.Just $ default_SolarSystem{solarSystem_name = solarSystem_name obj}
    , if obj == default_SolarSystem{solarSystem_security = solarSystem_security obj} then P.Nothing else P.Just $ default_SolarSystem{solarSystem_security = solarSystem_security obj}
    ]
from_SolarSystem :: SolarSystem -> T.ThriftVal
from_SolarSystem record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v10 -> P.Just (1, ("systemId",T.TI32 _v10))) $ solarSystem_systemId record
  , (\_v10 -> P.Just (2, ("name",T.TString $ E.encodeUtf8 _v10))) $ solarSystem_name record
  , (\_v10 -> P.Just (10, ("security",T.TDouble _v10))) $ solarSystem_security record
  ]
write_SolarSystem :: (T.Protocol p, T.Transport t) => p t -> SolarSystem -> P.IO ()
write_SolarSystem oprot record = T.writeVal oprot $ from_SolarSystem record
encode_SolarSystem :: (T.Protocol p, T.Transport t) => p t -> SolarSystem -> LBS.ByteString
encode_SolarSystem oprot record = T.serializeVal oprot $ from_SolarSystem record
to_SolarSystem :: T.ThriftVal -> SolarSystem
to_SolarSystem (T.TStruct fields) = SolarSystem{
  solarSystem_systemId = P.maybe (solarSystem_systemId default_SolarSystem) (\(_,_val12) -> (case _val12 of {T.TI32 _val13 -> _val13; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  solarSystem_name = P.maybe (solarSystem_name default_SolarSystem) (\(_,_val12) -> (case _val12 of {T.TString _val14 -> E.decodeUtf8 _val14; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  solarSystem_security = P.maybe (solarSystem_security default_SolarSystem) (\(_,_val12) -> (case _val12 of {T.TDouble _val15 -> _val15; _ -> P.error "wrong type"})) (Map.lookup (10) fields)
  }
to_SolarSystem _ = P.error "not a struct"
read_SolarSystem :: (T.Transport t, T.Protocol p) => p t -> P.IO SolarSystem
read_SolarSystem iprot = to_SolarSystem <$> T.readVal iprot (T.T_STRUCT typemap_SolarSystem)
decode_SolarSystem :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> SolarSystem
decode_SolarSystem iprot bs = to_SolarSystem $ T.deserializeVal iprot (T.T_STRUCT typemap_SolarSystem) bs
typemap_SolarSystem :: T.TypeMap
typemap_SolarSystem = Map.fromList [(1,("systemId",T.T_I32)),(2,("name",T.T_STRING)),(10,("security",T.T_DOUBLE))]
default_SolarSystem :: SolarSystem
default_SolarSystem = SolarSystem{
  solarSystem_systemId = 0,
  solarSystem_name = "",
  solarSystem_security = 0}
data Connection = Connection  { connection_fromSystemId :: I.Int32
  , connection_toSystemId :: I.Int32
  , connection_weight :: P.Maybe I.Int16
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Connection where
  hashWithSalt salt record = salt   `H.hashWithSalt` connection_fromSystemId record   `H.hashWithSalt` connection_toSystemId record   `H.hashWithSalt` connection_weight record  
instance QC.Arbitrary Connection where 
  arbitrary = M.liftM Connection (QC.arbitrary)
          `M.ap`(QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_Connection = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Connection{connection_fromSystemId = connection_fromSystemId obj} then P.Nothing else P.Just $ default_Connection{connection_fromSystemId = connection_fromSystemId obj}
    , if obj == default_Connection{connection_toSystemId = connection_toSystemId obj} then P.Nothing else P.Just $ default_Connection{connection_toSystemId = connection_toSystemId obj}
    , if obj == default_Connection{connection_weight = connection_weight obj} then P.Nothing else P.Just $ default_Connection{connection_weight = connection_weight obj}
    ]
from_Connection :: Connection -> T.ThriftVal
from_Connection record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v18 -> P.Just (1, ("fromSystemId",T.TI32 _v18))) $ connection_fromSystemId record
  , (\_v18 -> P.Just (2, ("toSystemId",T.TI32 _v18))) $ connection_toSystemId record
  , (\_v18 -> (3, ("weight",T.TI16 _v18))) <$> connection_weight record
  ]
write_Connection :: (T.Protocol p, T.Transport t) => p t -> Connection -> P.IO ()
write_Connection oprot record = T.writeVal oprot $ from_Connection record
encode_Connection :: (T.Protocol p, T.Transport t) => p t -> Connection -> LBS.ByteString
encode_Connection oprot record = T.serializeVal oprot $ from_Connection record
to_Connection :: T.ThriftVal -> Connection
to_Connection (T.TStruct fields) = Connection{
  connection_fromSystemId = P.maybe (connection_fromSystemId default_Connection) (\(_,_val20) -> (case _val20 of {T.TI32 _val21 -> _val21; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  connection_toSystemId = P.maybe (connection_toSystemId default_Connection) (\(_,_val20) -> (case _val20 of {T.TI32 _val22 -> _val22; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  connection_weight = P.maybe (connection_weight default_Connection) (\(_,_val20) -> P.Just (case _val20 of {T.TI16 _val23 -> _val23; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_Connection _ = P.error "not a struct"
read_Connection :: (T.Transport t, T.Protocol p) => p t -> P.IO Connection
read_Connection iprot = to_Connection <$> T.readVal iprot (T.T_STRUCT typemap_Connection)
decode_Connection :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Connection
decode_Connection iprot bs = to_Connection $ T.deserializeVal iprot (T.T_STRUCT typemap_Connection) bs
typemap_Connection :: T.TypeMap
typemap_Connection = Map.fromList [(1,("fromSystemId",T.T_I32)),(2,("toSystemId",T.T_I32)),(3,("weight",T.T_I16))]
default_Connection :: Connection
default_Connection = Connection{
  connection_fromSystemId = 0,
  connection_toSystemId = 0,
  connection_weight = P.Just (1)}
data Celestial = Celestial  { celestial_itemId :: I.Int32
  , celestial_name :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable Celestial where
  hashWithSalt salt record = salt   `H.hashWithSalt` celestial_itemId record   `H.hashWithSalt` celestial_name record  
instance QC.Arbitrary Celestial where 
  arbitrary = M.liftM Celestial (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_Celestial = []
             | P.otherwise = M.catMaybes
    [ if obj == default_Celestial{celestial_itemId = celestial_itemId obj} then P.Nothing else P.Just $ default_Celestial{celestial_itemId = celestial_itemId obj}
    , if obj == default_Celestial{celestial_name = celestial_name obj} then P.Nothing else P.Just $ default_Celestial{celestial_name = celestial_name obj}
    ]
from_Celestial :: Celestial -> T.ThriftVal
from_Celestial record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v26 -> P.Just (1, ("itemId",T.TI32 _v26))) $ celestial_itemId record
  , (\_v26 -> P.Just (2, ("name",T.TString $ E.encodeUtf8 _v26))) $ celestial_name record
  ]
write_Celestial :: (T.Protocol p, T.Transport t) => p t -> Celestial -> P.IO ()
write_Celestial oprot record = T.writeVal oprot $ from_Celestial record
encode_Celestial :: (T.Protocol p, T.Transport t) => p t -> Celestial -> LBS.ByteString
encode_Celestial oprot record = T.serializeVal oprot $ from_Celestial record
to_Celestial :: T.ThriftVal -> Celestial
to_Celestial (T.TStruct fields) = Celestial{
  celestial_itemId = P.maybe (celestial_itemId default_Celestial) (\(_,_val28) -> (case _val28 of {T.TI32 _val29 -> _val29; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  celestial_name = P.maybe (celestial_name default_Celestial) (\(_,_val28) -> (case _val28 of {T.TString _val30 -> E.decodeUtf8 _val30; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_Celestial _ = P.error "not a struct"
read_Celestial :: (T.Transport t, T.Protocol p) => p t -> P.IO Celestial
read_Celestial iprot = to_Celestial <$> T.readVal iprot (T.T_STRUCT typemap_Celestial)
decode_Celestial :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> Celestial
decode_Celestial iprot bs = to_Celestial $ T.deserializeVal iprot (T.T_STRUCT typemap_Celestial) bs
typemap_Celestial :: T.TypeMap
typemap_Celestial = Map.fromList [(1,("itemId",T.T_I32)),(2,("name",T.T_STRING))]
default_Celestial :: Celestial
default_Celestial = Celestial{
  celestial_itemId = 0,
  celestial_name = ""}
data LogicalError = LogicalError  { logicalError_errno :: I.Int32
  , logicalError_message :: LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance X.Exception LogicalError
instance H.Hashable LogicalError where
  hashWithSalt salt record = salt   `H.hashWithSalt` logicalError_errno record   `H.hashWithSalt` logicalError_message record  
instance QC.Arbitrary LogicalError where 
  arbitrary = M.liftM LogicalError (QC.arbitrary)
          `M.ap`(QC.arbitrary)
  shrink obj | obj == default_LogicalError = []
             | P.otherwise = M.catMaybes
    [ if obj == default_LogicalError{logicalError_errno = logicalError_errno obj} then P.Nothing else P.Just $ default_LogicalError{logicalError_errno = logicalError_errno obj}
    , if obj == default_LogicalError{logicalError_message = logicalError_message obj} then P.Nothing else P.Just $ default_LogicalError{logicalError_message = logicalError_message obj}
    ]
from_LogicalError :: LogicalError -> T.ThriftVal
from_LogicalError record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v33 -> P.Just (1, ("errno",T.TI32 _v33))) $ logicalError_errno record
  , (\_v33 -> P.Just (2, ("message",T.TString $ E.encodeUtf8 _v33))) $ logicalError_message record
  ]
write_LogicalError :: (T.Protocol p, T.Transport t) => p t -> LogicalError -> P.IO ()
write_LogicalError oprot record = T.writeVal oprot $ from_LogicalError record
encode_LogicalError :: (T.Protocol p, T.Transport t) => p t -> LogicalError -> LBS.ByteString
encode_LogicalError oprot record = T.serializeVal oprot $ from_LogicalError record
to_LogicalError :: T.ThriftVal -> LogicalError
to_LogicalError (T.TStruct fields) = LogicalError{
  logicalError_errno = P.maybe (logicalError_errno default_LogicalError) (\(_,_val35) -> (case _val35 of {T.TI32 _val36 -> _val36; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  logicalError_message = P.maybe (logicalError_message default_LogicalError) (\(_,_val35) -> (case _val35 of {T.TString _val37 -> E.decodeUtf8 _val37; _ -> P.error "wrong type"})) (Map.lookup (2) fields)
  }
to_LogicalError _ = P.error "not a struct"
read_LogicalError :: (T.Transport t, T.Protocol p) => p t -> P.IO LogicalError
read_LogicalError iprot = to_LogicalError <$> T.readVal iprot (T.T_STRUCT typemap_LogicalError)
decode_LogicalError :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> LogicalError
decode_LogicalError iprot bs = to_LogicalError $ T.deserializeVal iprot (T.T_STRUCT typemap_LogicalError) bs
typemap_LogicalError :: T.TypeMap
typemap_LogicalError = Map.fromList [(1,("errno",T.T_I32)),(2,("message",T.T_STRING))]
default_LogicalError :: LogicalError
default_LogicalError = LogicalError{
  logicalError_errno = 0,
  logicalError_message = ""}
